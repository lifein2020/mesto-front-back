{"ast":null,"code":"var _jsxFileName = \"/Users/svetlana/it/react-mesto-api-full/frontend/src/components/EditProfilePopup/EditProfilePopup.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport React from 'react';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditProfilePopup({\n  isOpen,\n  onClose,\n  onUpdateUser\n}) {\n  _s();\n\n  // управляемые компоненты (input)\n  const [userName, setUserName] = useState('');\n\n  function handleChangeName(e) {\n    setUserName(e.target.value);\n  }\n\n  const [userDescription, setUserDescription] = useState('');\n\n  function handleChangeDescription(e) {\n    setUserDescription(e.target.value);\n  } //Чтобы подставить в форму текущие значения:\n  //1. подписываемся на контекст\n\n\n  const currentUser = React.useContext(CurrentUserContext); //2. после загрузки текущего пользователя из API его данные будут использованы в управляемых компонентах.\n\n  useEffect(() => {\n    setUserName(currentUser.name);\n    setUserDescription(currentUser.about);\n  }, [currentUser, isOpen]); //Нужно еще следить за isOpen (за состоянием открытия), чтобы вставлять в инпуты данные пользователя, иначе, если мы удалим информацию из инпутов и просто закроем попап, то при следующем открытии инпуты будут пустые (без данных пользователя)\n\n  function handleSubmit(e) {\n    // Запрещаем браузеру переходить по адресу формы\n    e.preventDefault(); // Передаём значения управляемых компонентов во внешний обработчик\n\n    onUpdateUser({\n      userName,\n      userDescription\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    name: \"edit\",\n    id: \"formEdit\",\n    title: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C\",\n    button: \"save\",\n    titleButton: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n    isOpen: isOpen,\n    onClose: onClose,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"popup__input popup__input_user_name\",\n      id: \"name-input\",\n      name: \"name\",\n      required: true,\n      placeholder: \"\\u0418\\u043C\\u044F\",\n      minLength: \"2\",\n      maxLength: \"40\",\n      value: userName || '',\n      onChange: handleChangeName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"popup__error name-input-error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"popup__input popup__input_user_job\",\n      id: \"job-input\",\n      name: \"job\",\n      required: true,\n      placeholder: \"\\u0420\\u043E\\u0434 \\u0437\\u0430\\u043D\\u044F\\u0442\\u0438\\u0439\",\n      minLength: \"2\",\n      maxLength: \"200\",\n      value: userDescription || '',\n      onChange: handleChangeDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"popup__error job-input-error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditProfilePopup, \"argBhtLYo0ueCaho3GpMJVGpUeE=\");\n\n_c = EditProfilePopup;\nexport default EditProfilePopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditProfilePopup\");","map":{"version":3,"sources":["/Users/svetlana/it/react-mesto-api-full/frontend/src/components/EditProfilePopup/EditProfilePopup.js"],"names":["useState","useEffect","React","CurrentUserContext","PopupWithForm","EditProfilePopup","isOpen","onClose","onUpdateUser","userName","setUserName","handleChangeName","e","target","value","userDescription","setUserDescription","handleChangeDescription","currentUser","useContext","name","about","handleSubmit","preventDefault"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAA1B,EAA4D;AAAA;;AAExD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;;AACA,WAASW,gBAAT,CAA0BC,CAA1B,EAA6B;AACzBF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH;;AACD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC,EAAD,CAAtD;;AACA,WAASiB,uBAAT,CAAiCL,CAAjC,EAAoC;AAChCI,IAAAA,kBAAkB,CAACJ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACH,GAVuD,CAYxD;AACA;;;AACA,QAAMI,WAAW,GAAGhB,KAAK,CAACiB,UAAN,CAAiBhB,kBAAjB,CAApB,CAdwD,CAgBxD;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,WAAW,CAACQ,WAAW,CAACE,IAAb,CAAX;AACAJ,IAAAA,kBAAkB,CAACE,WAAW,CAACG,KAAb,CAAlB;AACH,GAHQ,EAGN,CAACH,WAAD,EAAcZ,MAAd,CAHM,CAAT,CAjBwD,CAoB7B;;AAE3B,WAASgB,YAAT,CAAsBV,CAAtB,EAAyB;AACrB;AACAA,IAAAA,CAAC,CAACW,cAAF,GAFqB,CAGrB;;AACAf,IAAAA,YAAY,CAAC;AAAEC,MAAAA,QAAF;AAAYM,MAAAA;AAAZ,KAAD,CAAZ;AACH;;AAED,sBACI,QAAC,aAAD;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,KAAK,EAAC,2HAHV;AAII,IAAA,MAAM,EAAC,MAJX;AAKI,IAAA,WAAW,EAAC,wDALhB;AAMI,IAAA,MAAM,EAAET,MANZ;AAOI,IAAA,OAAO,EAAEC,OAPb;AAQI,IAAA,QAAQ,EAAEe,YARd;AAAA,4BAUI;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,SAAS,EAAC,qCAFV;AAGA,MAAA,EAAE,EAAC,YAHH;AAIA,MAAA,IAAI,EAAC,MAJL;AAKA,MAAA,QAAQ,MALR;AAMA,MAAA,WAAW,EAAC,oBANZ;AAOA,MAAA,SAAS,EAAC,GAPV;AAQA,MAAA,SAAS,EAAC,IARV;AASA,MAAA,KAAK,EAAEb,QAAQ,IAAI,EATnB;AAUA,MAAA,QAAQ,EAAEE;AAVV;AAAA;AAAA;AAAA;AAAA,YAVJ,eAsBI;AACA,MAAA,SAAS,EAAC;AADV;AAAA;AAAA;AAAA;AAAA,YAtBJ,eA0BI;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,SAAS,EAAC,oCAFV;AAGA,MAAA,EAAE,EAAC,WAHH;AAIA,MAAA,IAAI,EAAC,KAJL;AAKA,MAAA,QAAQ,MALR;AAMA,MAAA,WAAW,EAAC,+DANZ;AAOA,MAAA,SAAS,EAAC,GAPV;AAQA,MAAA,SAAS,EAAC,KARV;AASA,MAAA,KAAK,EAAEI,eAAe,IAAI,EAT1B;AAUA,MAAA,QAAQ,EAAEE;AAVV;AAAA;AAAA;AAAA;AAAA,YA1BJ,eAsCI;AACA,MAAA,SAAS,EAAC;AADV;AAAA;AAAA;AAAA;AAAA,YAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6CH;;GA1EQZ,gB;;KAAAA,gB;AA4ET,eAAeA,gBAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport React from 'react';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser}) {\n\n    // управляемые компоненты (input)\n    const [userName, setUserName] = useState(''); \n    function handleChangeName(e) {\n        setUserName(e.target.value);\n    }\n    const [userDescription, setUserDescription] = useState(''); \n    function handleChangeDescription(e) {\n        setUserDescription(e.target.value);\n    }\n\n    //Чтобы подставить в форму текущие значения:\n    //1. подписываемся на контекст\n    const currentUser = React.useContext(CurrentUserContext); \n\n    //2. после загрузки текущего пользователя из API его данные будут использованы в управляемых компонентах.\n    useEffect(() => {\n        setUserName(currentUser.name);\n        setUserDescription(currentUser.about);\n    }, [currentUser, isOpen]); //Нужно еще следить за isOpen (за состоянием открытия), чтобы вставлять в инпуты данные пользователя, иначе, если мы удалим информацию из инпутов и просто закроем попап, то при следующем открытии инпуты будут пустые (без данных пользователя)\n\n    function handleSubmit(e) {\n        // Запрещаем браузеру переходить по адресу формы\n        e.preventDefault();\n        // Передаём значения управляемых компонентов во внешний обработчик\n        onUpdateUser({ userName, userDescription });\n    }\n\n    return (\n        <PopupWithForm\n            name=\"edit\"\n            id=\"formEdit\"\n            title=\"Редактировать профиль\"\n            button=\"save\"\n            titleButton=\"Сохранить\"\n            isOpen={isOpen}\n            onClose={onClose}\n            onSubmit={handleSubmit}\n        >\n            <input\n            type=\"text\"\n            className=\"popup__input popup__input_user_name\"\n            id=\"name-input\"\n            name=\"name\"\n            required\n            placeholder=\"Имя\"\n            minLength=\"2\"\n            maxLength=\"40\"\n            value={userName || ''}\n            onChange={handleChangeName}\n            />\n            <span\n            className=\"popup__error name-input-error\"\n            >\n            </span>\n            <input\n            type=\"text\"\n            className=\"popup__input popup__input_user_job\"\n            id=\"job-input\"\n            name=\"job\"\n            required\n            placeholder=\"Род занятий\"\n            minLength=\"2\"\n            maxLength=\"200\"\n            value={userDescription || ''}\n            onChange={handleChangeDescription}\n            />\n            <span\n            className=\"popup__error job-input-error\"\n            >\n            </span>\n        </PopupWithForm>  \n    )\n}\n\nexport default EditProfilePopup;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}